# This is a basic workflow to help you get started with Actions

name: Build AMI using Packer

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    types:
      - closed
    branches: [ "main" ]

env:
  DB_USER: ${{ secrets.DB_USER }}
  HOST: ${{ secrets.HOST }}
  DB: ${{ secrets.DB }}
  PASSWORD: ${{ secrets.PASSWORD }}
  DIALECT: ${{ secrets.DIALECT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  packer_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'release.zip'
          exclusions: '.git /node_modules/ /packer/'

      - name: Uploading Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: release.zip
      
      - name: Downloading Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release

      - name: Initializing Packer 
        run: packer init './packer/'
        
      - name: Building AMI using Packer
        run: packer build './packer/'

      - name: Upload packer manifest.json
        uses: actions/upload-artifact@v3
        with:
          name: pkr_manifest
          path: pkr_manifest.json

  create_launch_template:
    runs-on: ubuntu-latest
    needs: packer_build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.DEFAULT_REGION }}
    
    steps:
      - uses: actions/checkout@v3

      - name: Download packer manifest.json
        uses: actions/download-artifact@v3
        with:
          name: pkr_manifest

      - name: Get latest AMI ID and Launch Template Version
        id: env-vars
        run: |
          ami_id=$(jq -r '.builds[0].artifact_id | split(":")[1]' pkr_manifest.json)
          echo "ami_id=$ami_id" >> $GITHUB_ENV

          version_num=$(aws ec2 describe-launch-template-versions --launch-template-name asg_launch_config --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' --output text)
          echo "version_num=$version_num" >> $GITHUB_ENV
          
      - name: Create new Launch Template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name asg_launch_config  --launch-template-data "ImageId=${{ env.ami_id }}" --source-version ${{ env.version_num }}

      - name: Start Autoscaling instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webapp_asg --strategy Rolling --desired-configuration '{"LaunchTemplate": {"LaunchTemplateName":"asg_launch_config", "Version":"$Latest"}}'